{% extends 'layout.twig' %}

{% block body %}
<div class="row mt-2">
  <div class="col-12">
    <h1 class="display-1">Balls sorting</h1>
  </div>
</div>
<div class="row mt-2 d-flex align-items-stretch">
  <div class="col-8 d-flex flex-column">
    <div class="card shadow flex-grow-1">
      <div class="card-body">
        <h4 class="card-title">Live data</h4>
        <p class="card-text">Last acquired data at <span id="timestamp">...waiting...</span>.</p>
        <h4 id="measure" class="display-3">nA</h4>
      </div>
    </div>

  </div>
  <div class="col-4 d-flex flex-column">
    <div class="card shadow flex-grow-1">
      <div class="card-body">
        <h4 class="card-title">Control</h4>
        <p class="card-text">Use these controls to start or stop a record</p>
        <div class="row">
          <div class="col">
            <button type="button" name="" id="start" class="btn btn-success btn-lg btn-block">Start</button>
            <button type="button" name="" id="stop" class="btn btn-danger btn-lg btn-block"
              style="display: none">Stop</button>
          </div>
          <div class="col">
            <button type="button" name="" id="reset" class="btn btn-warning btn-lg btn-block">Reset</button>
          </div>
        </div>
        <p class="card-text">Current state : <span id="state">nA</span> </p>
      </div>
    </div>
  </div>
</div>

<div class="row d-print-none mt-4 mb-4">
  <div class="col-12">
    <div class="card shadow">
      <div class="card-body">
        <canvas id="graph"></canvas>
      </div>
    </div>
  </div>
</div>

{% endblock %}


{% block scripts %}
<!-- Inclure jQuery et Chart.js -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script type="text/javascript">
  $(() => {
    let barChart = null;
    let labels = ["Live ball counter"];
    let values = [0, 0, 0]; // Valeurs initiales pour le graphique (obligatoire car on ne peut pas prendre response.values directement)
    let date = 0;

    setInterval(() => {
      $.ajax({
        type: "post",
        url: "/api/state",
        dataType: "json",
        success: function (response) {

          values = response.values;

          // Prendre la date et la formater
          date = new Date(response.lastTimestamp);


          // Mettre à jour la dernière acquisition
          if (response.lastAcquisition !== null) {
            $('#measure').text(response.lastAcquisition);
            $('#timestamp').text(date.toLocaleTimeString());
          }
          else {
            $('#measure').text("EMPTY");
            $('#timestamp').text("...waiting...");
          }

          // Mettre à jour l'état
          $('#state').text(response.idle ? "IDLE" : "recording...");

          // Mettre à jour les boutons
          if (response.idle) {
            $('#start').show();
            $('#reset').show();
            $('#stop').hide();
          } else {
            $('#start').hide();
            $('#reset').hide();
            $('#stop').show();
          }

          // Mettre à jour le graphique
          updateChart();
          //}
        }
      });
    }, 1000);

    // Fonction pour mettre à jour le graphique
    function updateChart() {
      const data = {
        labels: labels,
        datasets: [{
          label: 'Number of pink balls',
          data: values[0],
          backgroundColor: [
            'rgba(255, 105, 180, 0.75)',
          ],
          borderColor: [
            'rgb(255, 105, 180)',
          ],
          borderWidth: 1
        },
        {
          label: 'Number of yellow balls',
          data: values[1],
          backgroundColor: [
            'rgba(255, 205, 86, 0.75)',
          ],
          borderColor: [
            'rgb(255, 205, 86)',
          ],
          borderWidth: 1
        },
        {
          label: 'Number of other balls',
          data: values[2],
          backgroundColor: [
            'rgba(153, 102, 255, 0.75)',
          ],
          borderColor: [
            'rgb(153, 102, 255)',
          ],
          borderWidth: 1
        }]
      };

      // Si le graphique n'existe pas, le créer
      if (barChart === null) {
        const graph = $('#graph');
        barChart = new Chart(graph, {
          type: 'bar',
          data: data,
          options: {
            scales: {
              x: {
                grid: {
                  color: 'white'
                },
                ticks: {
                  color: "white",
                }
              },
              y: {
                grid: {
                  color: 'white'
                },
                ticks: {
                  color: "white",
                  beginAtZero: true
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  color: "white",
                }
              }
            }
          }
        });
      }// Sinon, le mettre à jour
      else {
        barChart.data.datasets.forEach((dataset) => {
          dataset.data = values;
        });
        barChart.update();
      }
    }

    // Gestionnaires d'événements pour les boutons
    $("#start").click(function (e) {
      e.preventDefault();
      $.post("/api/start", function (data, textStatus, jqXHR) {
        // Traiter la réponse si nécessaire
      }, "json");
    });

    $("#stop").click(function (e) {
      e.preventDefault();
      $.post("/api/stop", function (data, textStatus, jqXHR) {
        // Traiter la réponse si nécessaire
      }, "json");
    });

    $("#reset").click(function (e) {
      values = [0, 0, 0];
      updateChart();
      e.preventDefault();
      $.post("/api/sendData", function (data, textStatus, jqXHR) {
        // Traiter la réponse si nécessaire
      }, "json");
    });

  });
</script>
{% endblock %}